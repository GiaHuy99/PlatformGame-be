package exe201.flexora.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfig {
    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
                // B·∫≠t CORS ƒë·ªÉ client t·ª´ m·ªôt ngu·ªìn kh√°c (v√≠ d·ª•: React app) c√≥ th·ªÉ k·∫øt n·ªëi
                .cors(Customizer.withDefaults())

                // T·∫ÆT CSRF: ƒê√¢y l√† b∆∞·ªõc B·∫ÆT BU·ªòC ƒë·ªÉ SockJS/STOMP ho·∫°t ƒë·ªông
                .csrf(csrf -> csrf.disable())

                // C·∫•u h√¨nh c√°c quy t·∫Øc cho ph√©p truy c·∫≠p (Authorization)
                .authorizeHttpRequests(auth -> auth
                        // Cho ph√©p T·∫§T C·∫¢ c√°c k·∫øt n·ªëi ƒë·∫øn endpoint WebSocket ("/ws") v√† c√°c ƒë∆∞·ªùng d·∫´n con c·ªßa n√≥
                        .requestMatchers("/ws/**").permitAll()

                        // T·∫°m th·ªùi cho ph√©p t·∫•t c·∫£ c√°c request kh√°c ƒë·ªÉ d·ªÖ test
                        // üö® C·∫£nh b√°o: Trong m√¥i tr∆∞·ªùng production, b·∫°n c·∫ßn l√†m ch·∫∑t ch·∫Ω h∆°n!
                        .anyRequest().permitAll()
                );

        return http.build();
    }

}
